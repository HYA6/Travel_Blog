# 서버 포트 번호 변경
server.port=9090

# 한글 깨짐 방지
server.servlet.encoding.force=true

# Spring DataSource (MySQL)
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.datasource.url=jdbc:mysql://localhost:3306/travelProject?useSSL=false&characterEncoding=UTF-8&serverTimezone=UTC
#spring.datasource.username=root
#spring.datasource.password=0000

# h2 데이터베이스 웹 콘솔 접근 허용
spring.h2.console.enabled=true
# 고정 URL을 설정한다.
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.username=sa
spring.datasource.password=1234
# 초기화를 통해 생성된 스키마에 data.sql을 실행해서 데이터를 채운다.
spring.jpa.defer-datasource-initialization=true

# Spring JPA
#spring.jpa.database=mysql
#spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
#spring.jpa.hibernate.naming.implicit-strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy
#spring.jpa.hibernate.naming.physical-strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
## 디버그 레벨로 쿼리를 출력한다.
logging.level.org.hibernate.SQL=DEBUG
# 서버를 실행할 때마다 DB 초기화하기 
# update: 서버가 실행될 때 데이터베이스의 데이터를 항상 초기화시키지 않고 유지되게 한다.
# create-drop: 서버가 실행될 때 데이터를 생성하고 종료될 때 제거한다.
# H2 자동 스키마 생성을 비활성화 한다. => schema.sql 파일의 내용대로 테이블을 만든다.
spring.jpa.hibernate.ddl-auto=none
# true일 경우 해당 데이터를 근거로 서버 시작 지점에 DDL문을 생성하여 DB에 적용
spring.jpa.generate-ddl=true
# SQL문 로깅 활성화 여부
spring.jpa.show-sql=true
# 쿼리를 보기 편하게 출력한다.
spring.jpa.properties.hibernate.format_sql=true
# 쿼리에 적용되는 파라미터를 보여준다.
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
spring.mvc.pathmatch.matching-strategy=ant_path_matcher

# thymeleaf
spring.thymeleaf.prefix=classpath:templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.cache=false

# 파일 업로드 용량 설정
spring.servlet.multipart.enabled : true
spring.servlet.multipart.location : C:/travelBlog/
spring.servlet.multipart.max-request-size : 30MB
spring.servlet.multipart.max-file-size : 10MB
part1.upload.path = C:/travelBlog/postThumbnail
part2.upload.path = C:/travelBlog/postImages
